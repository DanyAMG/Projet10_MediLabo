@using Model
@using Services

@page "/patients"

@inject PatientService PatientService
@inject NavigationManager Navigation
@inject IJSRuntime JS
@inject HttpClient Http

<h3>Liste des patients</h3>

<button @onclick="NavigateToAddPatient" class="btn btn-primary mb-3">Ajouter patient</button>

@if (patients == null)
{
    <p>Chargement...</p>
}
else
{
    <ul>
        @foreach (var patient in patients)
        {
            <li>
                <a href="@($"/patients/{patient.PatientId}")">
                    @patient.FirstName @patient.Name @patient.Birthday
                </a>
            </li>
        }
    </ul>
}

@code {
    List<PatientDTO>? patients;
    bool isOperateur = false;

    protected override async Task OnInitializedAsync()
    {
        var token = await JS.InvokeAsync<string>("localStorage.getItem", "jwt");

        if (string.IsNullOrEmpty(token))
        {
            Navigation.NavigateTo("/login");
            return;
        }

        Http.DefaultRequestHeaders.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);

        await LoadPatients();
    }

    void NavigateToAddPatient()
    {
        NavigationManager.NavigateTo("/patients/add");
    }

    private async Task LoadPatients()
    {
        patients = await Http.GetFromJsonAsync<List<PatientDTO>>("https://localhost:7047/patients");
      
    }
    [Inject]
    NavigationManager NavigationManager { get; set; } = default!;
}